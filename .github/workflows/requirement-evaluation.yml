name: Requirement Evaluation
on:
  discussion:
    types:
      - created
  discussion_comment:
    types:
      - created
jobs:
  requirement-evaluation:
    if: github.event.discussion.category.name == 'ideas' && github.event.discussion.user.login != 'giscus[bot]'
    runs-on: ubuntu-latest
    permissions:
      discussions: write
    env:
      GH_TOKEN: ${{ github.token }}
      TITLE: ${{ github.event.discussion.title }}
    steps:
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install CLIs
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

          npm set //npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}
          npm set @idea2app:registry=https://npm.pkg.github.com

          pnpm i @idea2app/work-counter -g

          cat > .env <<EOF
          ${{ secrets.ENV_FILE }}
          EOF

      - name: Collect Requirement content
        run: |
          echo "${{ github.event.discussion.body }}" > "$TITLE.md"

          if [[ "${{ github.event_name }}" == "discussion_comment" ]]; then
            comments=$(gh api graphql -f query='
              query($discussionId: ID!) {
                node(id: $discussionId) {
                  ... on Discussion {
                    comments(first: 100) {
                      nodes {
                        body
                        author { login }
                      }
                    }
                  }
                }
              }' -f discussionId="${{ github.event.discussion.node_id }}" \
              --jq '.data.node.comments.nodes | map(select(.author.login != "github-actions[bot]")) | .[].body'
            )
            echo "$comments" >> "$TITLE.md"
          fi

      - name: Run Evaluator
        run: |
          work-counter evaluate "$TITLE.md"

          variables=$(yq eval -o=sh "logs/evaluation/$TITLE-$(date +%Y-%m-%d).yml")
          eval $variables

          taxRate=$(echo "$taxRate * 100" | bc)

          max_model_index=$(echo $variables | grep -oP 'models_(\d+)=' | grep -oP '\d+' | sort -n | tail -1)
          models=$(
            for i in $(seq 0 $max_model_index); do
              eval "value=\$models_$i"
              [ -z "$value" ] && break
              echo "    $((i+1)). $value"
            done
          )
          max_scope_index=$(echo $variables | grep -oP 'scopes_(\d+)=' | grep -oP '\d+' | sort -n | tail -1)
          scopes=$(
            for i in $(seq 0 $max_scope_index); do
              eval "value=\$scopes_$i"
              [ -z "$value" ] && break
              echo "    $((i+1)). $value"
            done
          )
          cat > evaluation.md <<EOF
          - 主要功能
          $models
          - 开发范围
          $scopes
          - 设计师：$designerCount 人
          - 工程师：$developerCount 人
          - 工作量：$workload 人天
          - 周期：$monthPeriod 个月
          - 税率：$taxRate %
          - 预算：￥$budget
          EOF

          gh api graphql -f query='
            mutation($discussionId: ID!, $body: String!) {
              addDiscussionComment(input: {discussionId: $discussionId, body: $body}) {
                comment { id }
              }
            }' -f discussionId="${{ github.event.discussion.node_id }}" -f body="$(cat evaluation.md)"
